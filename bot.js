require('dotenv').config();
const { Telegraf } = require('telegraf');
const { containsLinksOrUsernames } = require('./contains-links-or-username');
const { cosineSimilarity } = require('./cosine-similarity');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã
const TARGET_GROUP_ID = -123456789; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

// –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
const REFERENCE_TEXT = `ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá
–ü—Ä–æ–¥–∞–º 2000 SAR –∑–∞ RUB, USDT, EUR
üìç –ú–µ–¥–∏–Ω–∞, –ú–µ–∫–∫–∞, –î–∂–∏–¥–¥–∞
üíµ –ö—É—Ä—Å: 27.81
üîÑ –°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞: –ü–µ—Ä–µ–≤–æ–¥
üöö –î–æ—Å—Ç–∞–≤–∫–∞: 30 SAR
–ü–ø–ø–ø—Ä

üö® –°—Ä–æ—á–Ω–æ!!!`;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
    try {
        const chatType = ctx.chat.type;
        const messageText = ctx.message.text;

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if (chatType === 'group' || chatType === 'supergroup') {
            if (ctx.chat.id === TARGET_GROUP_ID) {
                await handleMessage(ctx, messageText, '–≥—Ä—É–ø–ø—ã');
            }
        }

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if (chatType === 'private') {
            await handleMessage(ctx, messageText, '–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleMessage(ctx, text, source) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏ –∏ —é–∑–µ—Ä–Ω–µ–π–º—ã
    const { hasLink, hasUsername, contains } = containsLinksOrUsernames(text);

    if (contains) {
        await ctx.reply(
            `‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ${source} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n` +
            `- –°—Å—ã–ª–∫–∞: ${hasLink ? '–î–∞' : '–ù–µ—Ç'}\n` +
            `- –Æ–∑–µ—Ä–Ω–µ–π–º: ${hasUsername ? '–î–∞' : '–ù–µ—Ç'}`
        );
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
    const similarity = cosineSimilarity(text, REFERENCE_TEXT);
    if (similarity < 0.85) {
        await ctx.reply(
            `‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ${source} —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.\n` +
            `–ü–æ—Ö–æ–∂–µ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: ${(similarity * 100).toFixed(2)}%`
        );
        return;
    }

    // –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
    await ctx.reply(`‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ${source} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.${similarity}`);
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'))
    .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err));

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ gracefully –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
