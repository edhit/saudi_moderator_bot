const { exec } = require('child_process');
const { Telegraf } = require('telegraf');
const brain = require('brain.js');
const winston = require('./logger');
const fs = require('fs');
const { isLinkPresent } = require('./utils');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
const net = new brain.NeuralNetwork();
let trainingData = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
const loadTrainingData = () => {
  if (fs.existsSync('./src/trainingData.json')) {
    try {
      const data = JSON.parse(fs.readFileSync('./src/trainingData.json', 'utf8'));
      trainingData = Array.isArray(data) ? data : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ trainingData.json:', error);
      trainingData = [];
    }
  } else {
    trainingData = [];
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
const saveTrainingData = () => {
  try {
    fs.writeFileSync('./src/trainingData.json', JSON.stringify(trainingData, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è trainingData.json:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const addOrUpdateTrainingData = (messageId, input, output) => {
  const existingRecordIndex = trainingData.findIndex(
    (record) => record.messageId === messageId
  );

  if (existingRecordIndex > -1) {
    trainingData[existingRecordIndex] = { messageId, input, output };
  } else {
    trainingData.push({ messageId, input, output });
    trainingCount++;

  }

  saveTrainingData();
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadTrainingData();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
let trainingCount = trainingData.length;
const trainingGoal = 1000;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
const reviewMessage = async (ctx, message) => {
  const messageText = message.text || '';
  // const groupId = message.chat.id;
  // const userId = message.from.id;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
  const modMessage = await ctx.telegram.sendMessage(process.env.MODERATOR_CHAT_ID, `–ü–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n\n${messageText}`, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–î–∞', callback_data: `approve:${message.message_id}` },
          { text: '–ù–µ—Ç', callback_data: `reject:${message.message_id}` },
        ],
      ],
    },  
  });

  winston.info(`Message sent for moderation: ${modMessage.message_id}`);
};

bot.command('ujzbqecfubpjkqu', (ctx) => ctx.reply('ü´°'))

bot.command('rasxtdhndjvwtzp', async (ctx) => {
  if (ctx.from.id !== process.env.ADMIN_ID) {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
  }

  try {
    ctx.reply('–ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    exec('bash manage.sh update', (error, stdout, stderr) => {
      if (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${error.message}`);
        ctx.reply(`–û—à–∏–±–∫–∞: ${error.message}`);
        return;
      }
      if (stderr) {
        console.error(`–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${stderr}`);
        ctx.reply(`–û—à–∏–±–∫–∞: ${stderr}`);
        return;
      }
      ctx.reply(`–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:\n${stdout}`);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /git:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const [action, messageId] = data.split(':');

    if (action === 'approve' || action === 'reject') {
      // const message = await ctx.telegram.getMessage(groupId, messageId);
      const message = ctx.callbackQuery.message.text.replace('–ü–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n\n', '');
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
      // trainingData.push({
      //   input: { text: message || '' },
      //   output: { appropriate: action === 'approve' ? 1 : 0 },
      // });
      // saveTrainingData();
      addOrUpdateTrainingData(messageId, { text: message || '' }, { appropriate: action === 'approve' ? 1 : 0 });

      await ctx.editMessageText(ctx.callbackQuery.message.text, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: action === 'approve' ? '‚úÖ –î–∞' : '–î–∞' , callback_data: `approve:${messageId}` },
              { text: action === 'reject' ? '‚úÖ –ù–µ—Ç' : '–ù–µ—Ç', callback_data: `reject:${messageId}` },
            ],
          ],
        },  
      }); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
      await ctx.answerCbQuery(`–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: ${trainingGoal - trainingCount}`);

      if (trainingCount >= trainingGoal) {
        await ctx.telegram.sendMessage(process.env.ADMIN_ID, '–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.');
        net.train(trainingData); // –û–±—É—á–∞–µ–º —Å–µ—Ç—å
      }
    }
  } catch (error) {
    winston.error('Error processing callback query:', error);
  }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
bot.on('message', async (ctx) => {
  try {
    const message = ctx.message;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –æ–±—É—á–µ–Ω
    if (trainingCount >= trainingGoal) {
      const input = { text: message.text || '' };
      const result = net.run(input);
      const username = `@${ctx.message.from.username}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ` || '–û–±—ä—è–≤–ª–µ–Ω–∏–µ' 

      if (result.appropriate < 0.5 || isLinkPresent(message.text)) {
        // –£–¥–∞–ª–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.deleteMessage(message.message_id);
        await ctx.telegram.sendMessage(message.from.id, `${username}–±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã.`);
        winston.warn(`Inappropriate message deleted: ${message.message_id}`);
        return;
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
      await reviewMessage(ctx, message);
    }
  } catch (error) {
    winston.error('Error processing message:', error);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});
