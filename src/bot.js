const fs = require("fs");
const { Telegraf } = require("telegraf");
const brain = require("brain.js");
const winston = require("./logger");
const { isLinkPresent } = require("./utils");
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// JSON —Ñ–∞–π–ª—ã
const ai = "./src/trainingData.json";
const database = "./src/database.json";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
const net = new brain.NeuralNetwork();
let trainingData = [];

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let db;

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
const loadTrainingData = () => {
  if (fs.existsSync(ai)) {
    try {
      const data = JSON.parse(fs.readFileSync(ai, "utf8"));
      trainingData = Array.isArray(data) ? data : [];
    } catch (error) {
      winston.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ trainingData.json:", error);
      trainingData = [];
    }
  } else {
    trainingData = [];
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
const saveTrainingData = () => {
  try {
    fs.writeFileSync(ai, JSON.stringify(trainingData, null, 2));
  } catch (error) {
    winston.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è trainingData.json:", error);
  }
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const loadDatabase = () => {
  try {
    if (!fs.existsSync(database)) {
      fs.writeFileSync(
        database,
        JSON.stringify({
          bot_id: null,
          bot_name: null,
          admin: null,
          moderator: null,
          group: null,
          moderate: "off",
          train: false,
        }),
      );
    }
    db = JSON.parse(fs.readFileSync(database, "utf-8"));
  } catch (err) {
    winston.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err);
  }
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const saveDatabase = (data) => {
  try {
    fs.writeFileSync(database, JSON.stringify(data, null, 2));
  } catch (err) {
    winston.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const addOrUpdateTrainingData = (messageId, input, output) => {
  const existingRecordIndex = trainingData.findIndex(
    (record) => record.messageId === messageId,
  );

  if (existingRecordIndex > -1) {
    trainingData[existingRecordIndex] = { messageId, input, output };
  } else {
    trainingData.push({ messageId, input, output });
    trainingCount++;
  }

  saveTrainingData();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—ã
function calculateAdPrice(membersCount) {
  const minPrice = 10; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
  const maxPrice = 600; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
  const minMembers = 1000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const maxMembers = 200000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

  if (membersCount <= minMembers) return minPrice; // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 1000
  if (membersCount >= maxMembers) return maxPrice; // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ–ª—å—à–µ 200000

  // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
  return (
    minPrice +
    (maxPrice - minPrice) *
      ((membersCount - minMembers) / (maxMembers - minMembers))
  ).toFixed(2);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadTrainingData();
loadDatabase();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
let trainingCount = trainingData.length;
const trainingGoal = 1000;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
const isAdmin = (ctx, db) => ctx.from.id === db.admin;
const isModerator = (ctx, db) => ctx.from.id === db.moderator;

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
const formatMessage = (text) => `‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º*\n\n${text}`;
const sendError = (ctx, error) => ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
const reviewMessage = async (ctx, message) => {
  try {
    const messageText = message.text || "";
    // const groupId = message.chat.id;
    // const userId = message.from.id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    const modMessage = await ctx.telegram.sendMessage(
      db.moderator,
      `–ü–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n\n${messageText}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–î–∞", callback_data: `approve:${message.message_id}` },
              { text: "–ù–µ—Ç", callback_data: `reject:${message.message_id}` },
            ],
          ],
        },
      },
    );

    winston.info(`Message sent for moderation: ${modMessage.message_id}`);
  } catch (error) {
    winston.error("Error processing message:", error);
  }
};

// Middlewares
const privateChatMiddleware = async (ctx, next) => {
  const chatType = ctx.chat?.type;

  if (chatType === "private") {
    // –ï—Å–ª–∏ —á–∞—Ç –ª–∏—á–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await next();
  } else return;
};

const fromGroupChatMiddleware = async (ctx, next) => {
  if (!db) return;

  if (Number(chatId) === Number(db.group)) {
    // –ï—Å–ª–∏ —á–∞—Ç –ª–∏—á–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await next();
  } else return;
};

const isAdminMiddleware = async (ctx, next) => {
  if (!db) return sendError(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");

  if (!isAdmin(ctx, db)) return; //ctx.reply("ü§ñ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");

  await next();
};

const isAdminAndModeratorMiddleware = async (ctx, next) => {
  if (!db) return sendError(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");

  if (!isAdmin(ctx, db) && !isModerator(ctx, db)) return; //ctx.reply("ü§ñ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.");

  await next();
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(privateChatMiddleware, async (ctx) => {
  try {
    if (!db) return sendError(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");

    if (!db.admin) {
      const botInfo = await bot.telegram.getMe(); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botId = botInfo.id; // ID –±–æ—Ç–∞
      const botName = botInfo.username;

      db.bot_id = botId;
      db.bot_name = botName;
      db.admin = ctx.from.id;
      db.moderator = ctx.from.id;
      saveDatabase(db);
      return ctx.replyWithMarkdown(
        formatMessage("–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!"),
      );
    }

    if (isAdmin(ctx, db) || isModerator(ctx, db)) {
      return ctx.replyWithMarkdown(
        formatMessage(`–°—Ç–∞—Ç—É—Å: ${isAdmin(ctx, db) ? "ADMIN" : "MODERATOR"}
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã`),
      );
    }

    return;
  } catch (error) {
    winston.error("Error processing message:", error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã
bot.command("info", privateChatMiddleware, isAdminMiddleware, async (ctx) => {
  try {
    // const memberCount = await ctx.telegram.getChatMembersCount(Number(db.group));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –±–∞–∑—ã
    const infoMessage = `
  üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞:*
  ü§ñ *–ë–æ—Ç:* ${db.bot_id || "–ù–µ —É–∫–∞–∑–∞–Ω"}
  üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* ${db.admin || "–ù–µ —É–∫–∞–∑–∞–Ω"}
  üõ°Ô∏è *–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:* ${db.moderator || "–ù–µ —É–∫–∞–∑–∞–Ω"}
  üë• *–ì—Ä—É–ø–ø–∞:* ${db.group || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}

  ‚öôÔ∏è *–ú–æ–¥–µ—Ä–∞—Ü–∏—è:* ${db.moderate || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
  üß† *–û–±—É—á–µ–Ω–∏–µ:* ${trainingCount} –∏–∑ ${trainingGoal}
    `.trim();

    return ctx.replyWithMarkdown(infoMessage);
  } catch (error) {
    winston.error("Error processing message:", error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
bot.command("aezakmi", privateChatMiddleware, isAdminMiddleware, (ctx) => {
  try {
    trainingData = [];
    trainingCount = trainingData.length;

    db = {
      bot_id: null,
      bot_name: null,
      admin: null,
      moderator: null,
      group: null,
      moderate: "off",
      train: false,
    };

    saveTrainingData();
    saveDatabase(db);

    loadTrainingData();
    loadDatabase();

    return ctx.reply(`‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. /start`);
  } catch (error) {
    winston.error("Error processing message:", error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω—ã —Ä–µ–∫–ª–∞–º—ã
bot.command(
  "price",
  privateChatMiddleware,
  isAdminAndModeratorMiddleware,
  async (ctx) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
      const membersCount = await ctx.telegram.getChatMembersCount(ctx.chat.id);

      if (membersCount <= 1000)
        return ctx.reply(
          "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç 1000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã",
        );

      let moderator = "";
      if (ctx.from.id === db.moderator)
        moderator = `üì© –î–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å ${
          ctx.from.username
            ? "@" + ctx.from.username
            : '"–ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ï –£–ö–ê–ó–ê–ù–û"'
        }`;
      // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—ã
      const price = calculateAdPrice(membersCount);

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const message = `
üí∞ –¶–µ–Ω–∞ —Ä–µ–∫–ª–∞–º—ã –≤ –≥—Ä—É–ø–ø–µ:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersCount}
- –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã: $${price}

${moderator}
    `;
      return ctx.reply(message);
    } catch (error) {
      winston.error("Error processing message:", error);
    }
  },
);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.command("admin", privateChatMiddleware, isAdminMiddleware, (ctx) => {
  try {
    const admin = parseInt(ctx.message.text.split(" ")[1]);
    if (isNaN(admin))
      return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞.");

    db.admin = admin;
    saveDatabase(db);
    return ctx.reply(`‚úÖ –ê–¥–º–∏–Ω –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ID: ${admin}`);
  } catch (error) {
    winston.error("Error processing message:", error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.command("moderator", privateChatMiddleware, isAdminMiddleware, (ctx) => {
  try {
    const newModeratorId = parseInt(ctx.message.text.split(" ")[1]);
    if (isNaN(newModeratorId))
      return ctx.reply(
        "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
      );

    db.moderator = newModeratorId;
    saveDatabase(db);
    return ctx.reply(`‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ID: ${newModeratorId}`);
  } catch (error) {
    winston.error("Error processing message:", error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.command("group", privateChatMiddleware, isAdminMiddleware, (ctx) => {
  try {
    const newGroupId = parseInt(ctx.message.text.split(" ")[1]);
    if (isNaN(newGroupId))
      return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");

    db.group = newGroupId;
    saveDatabase(db);
    return ctx.reply(`‚úÖ –ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ID: ${newGroupId}`);
  } catch (error) {
    winston.error("Error processing message:", error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
bot.command(
  "moderate",
  privateChatMiddleware,
  isAdminAndModeratorMiddleware,
  (ctx) => {
    try {
      const state = ctx.message.text.split(" ")[1];
      if (!["on", "off", "test"].includes(state))
        return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ 'on' –∏–ª–∏ 'off' –∏–ª–∏ 'test'");

      db.moderate = state;
      saveDatabase(db);
      return ctx.reply(
        `‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${
          state === "on" ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ"
        }`,
      );
    } catch (error) {
      winston.error("Error processing message:", error);
    }
  },
);

// –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
bot.command(
  "help",
  privateChatMiddleware,
  isAdminAndModeratorMiddleware,
  (ctx) => {
    const helpMessage = `
‚öôÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:*
/admin [ID] - –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞.
/moderator [ID] - –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
/group [ID] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
/moderate [on|off] - –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã. 
/price - –¶–µ–Ω–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
/info - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üõ°Ô∏è *–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:*
/moderate [on|off] - –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã.
/price - –¶–µ–Ω–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

_/moderate test - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –±–æ—Ç(–ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è)_

üìú *–û–ø–∏—Å–∞–Ω–∏–µ:*
- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö).
- –ö–æ–º–∞–Ω–¥–∞ /moderate [on|off] –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É —Å—Ä–∞–∑—É!
  `;

    ctx.replyWithMarkdown(formatMessage(helpMessage));
  },
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
bot.on(
  "callback_query",
  privateChatMiddleware,
  isAdminAndModeratorMiddleware,
  async (ctx) => {
    try {
      const data = ctx.callbackQuery.data;
      const [action, messageId] = data.split(":");

      if (action === "approve" || action === "reject") {
        const message = ctx.callbackQuery.message.text
          .replace("–ü–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n\n", "")
          .replace(/\s+/g, " ")
          .trim();

        addOrUpdateTrainingData(
          messageId + "_" + ctx.from.id,
          { text: message || "" },
          { appropriate: action === "approve" ? 1 : 0 },
        );

        if (db.train === true) {
          return ctx.answerCbQuery(`üß† –û–±—É—á–∞–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        }

        try {
          await ctx.editMessageText(ctx.callbackQuery.message.text, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: action === "approve" ? "‚úÖ –î–∞" : "–î–∞",
                    callback_data: `approve:${messageId}`,
                  },
                  {
                    text: action === "reject" ? "‚úÖ –ù–µ—Ç" : "–ù–µ—Ç",
                    callback_data: `reject:${messageId}`,
                  },
                ],
              ],
            },
          }); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫
        } catch (error) {}

        await ctx.answerCbQuery(
          `–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: ${
            trainingGoal - trainingCount
          }`,
        );

        if (trainingCount >= trainingGoal) {
          db.train = true;
          saveDatabase(db);

          await ctx.reply(
            "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.",
          );
          net.train(trainingData); // –û–±—É—á–∞–µ–º —Å–µ—Ç—å
        }
      }
    } catch (error) {
      winston.error("Error processing callback query:", error);
    }
  },
);

async function moderateGroup(ctx) {
  try {
    if (!db) return;
    // ctx.telegram.sendMessage(db.admin, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
    const chatId = ctx.chat.id;
    const fromId = ctx.from.id;
    const message = ctx.message;

    if (
      (!message.text || isLinkPresent(message.text)) &&
      db.moderate === "on" &&
      Number(fromId) !== Number(db.moderator)
    )
      return ctx.deleteMessage(message.message_id);

    if (Number(fromId) === Number(db.moderator)) {
      return ctx.telegram.sendMessage(
        db.admin,
        `‚≠êÔ∏è #message_moderator\n\n${
          message.text
            ? message.text
            : message.caption
              ? message.caption
              : "–¢–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç—É. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:"
        }\n\n(–°—Å—ã–ª–∫–∞)[https://t.me/c/${String(chatId).slice(4)}/${message.message_id}]`,
        {
          parse_mode: 'Markdown'
        }
      );
    }
    if (fromId === db.bot_id) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –æ–±—É—á–µ–Ω
    if (db.train === true) {
      const input = { text: message.text.replace(/\s+/g, " ").trim() || "" };
      const result = net.run(input);
      const username =
        `@${ctx.message.from.username}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ` || "–û–±—ä—è–≤–ª–µ–Ω–∏–µ";

      if (db.moderate === "test") {
        return ctx.replyWithMarkdown(
          `${message.text}
           –°—Ö–æ–∂–µ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: *${result.appropriate * 100} %*
           –ù–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫: *${(isLinkPresent(message.text)) ? "–î–∞" : "–ù–µ—Ç"}*
        `);
      }

      if (
        (result.appropriate < 0.5 || isLinkPresent(message.text)) &&
        db.moderate === "on"
      ) {
        // –£–¥–∞–ª–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.deleteMessage(message.message_id);
        // await ctx.telegram.sendMessage(message.from.id,
        await ctx.reply(
          `${username}–±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã.`,
        );
        winston.warn(`Inappropriate message deleted: ${message.message_id}`);
        return;
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
      await reviewMessage(ctx, message);
    }
  } catch (error) {
    winston.error("Error processing message:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
bot.on("message", fromGroupChatMiddleware, moderateGroup);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
bot.on("edited_message", fromGroupChatMiddleware, moderateGroup);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  winston.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", err);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  winston.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", err);
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
